{"version":3,"file":"components-register-Register-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AASA;AACA;AACA","sources":["webpack://denanu-login/./src/components/api/Token.tsx","webpack://denanu-login/./src/components/api/register.tsx","webpack://denanu-login/./src/components/register/Register.tsx"],"sourcesContent":["import { useState } from 'react';\n\nexport function getValue<T>(key: string) {\n  const str = localStorage.getItem(key);\n  if (str) {\n    const val: T = JSON.parse(str);\n    return val\n  }\n  return undefined;\n}\n\nexport function useLocalStorage<T>(name: string): [T | undefined, (val: T, remember?: boolean) => void] {\n\n  const [value, setValue] = useState(getValue<T>(name));\n\n  const save = (userToken: T, remember?: boolean) => {\n    if (true) {\n      if (userToken) {\n        localStorage.setItem(name, JSON.stringify(userToken));\n      }\n      else {\n        localStorage.removeItem(name);\n      }\n    }\n    setValue(userToken);\n  };\n\n  return [\n    value, save\n  ]\n}\n\nexport default function useToken() {\n  return useLocalStorage<Token>(\"token\");\n}\n\nexport interface Token {\n  username: string;\n  token: string;\n}\n\nexport interface IToken {\n  token?: Token;\n  setToken: (t: Token, remember: boolean) => void;\n}","import { Token } from \"./Token\";\n\ntype urlValue = string | null;\n\nexport async function register(\n  urlApi: string, \n  handleError: (reason: string) => void, \n  onSuccess: VoidFunction, \n  setToken: (token: Token, remember: boolean) => void, \n  username: urlValue, \n  mail: urlValue, \n  password: urlValue, \n  sendmail: urlValue,\n  remember: urlValue, \n  signature: urlValue\n  ) {\n  \n  if (username && mail && password && sendmail && signature) {\n    const data = await fetch(urlApi + \"/register.php?\" + new URLSearchParams({\n      username: username,\n      mail: mail,\n      password: password,\n      sendmail: sendmail,\n      signature: signature\n    }))\n    .then(r => r.json());\n\n    if (data.status === \"success\") {\n      setToken(data.data, Boolean(remember));\n      onSuccess();\n    }\n    else if (data.status === \"fail\") {\n      handleError(data.reason)\n    }\n  }\n  handleError(\"error\")\n}","import { useEffect } from \"react\";\nimport useToken from \"../api/Token\";\nimport { register } from \"../api/register\";\n\n\nexport interface RegisterProps {\n  backendLocation: string;\n  onLogIn?: VoidFunction;\n}\n\n\nexport default function SignRegister(props: RegisterProps) {\n  const { onLogIn, backendLocation } = props;\n\n  const [, setToken ] = useToken();\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.pathname);\n    register(\n      backendLocation,\n      (r: string) => {},\n      ()=>{\n        if (onLogIn)\n          onLogIn\n      },\n      setToken,\n      params.get(\"username\"),\n      params.get(\"mail\"),\n      params.get(\"password\"),\n      params.get(\"sendmail\"),\n      params.get(\"remember\"),\n      params.get(\"signature\"),\n    )\n  }, []);\n  return null;\n}"],"names":[],"sourceRoot":""}